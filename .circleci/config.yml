version: 2.1

node-image: &node-image
  docker:
    - image: circleci/node:13.8.0

aws-cli-image: &aws-cli-image
  docker:
    - image: amazon/aws-cli

ansible-image: &ansible-image
  docker:
    - image: python:3.7-alpine3.11

lightweight-image: &lightweight-image
  docker:
    - image: ansible

parameters:
  memstash_token:
    type: string
    default: 2c582b39-ba70-4636-bdbe-9163505f7f73

orbs:
  aws-s3: circleci/aws-s3@2.0.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: << pipeline.parameters.memstash_token >>" --request GET https://api.memstash.io/values/migration_<< parameters.id >> | grep -c "has been executed successfully")
            if(( $SUCCESS==1 ));
            then
              cd ./backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    <<: *node-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: frontend
          command: npm install && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *node-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: backend
          command: npm install && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *node-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          working_directory: frontend
          command: npm test
                
  test-backend:
    <<: *node-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          working_directory: backend
          command: npm test

  scan-frontend:
    <<: *node-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          working_directory: frontend
          command: npm audit --audit-level=critical

  scan-backend:
    <<: *node-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          working_directory: backend
          command: npm audit --audit-level=critical

  deploy-infrastructure:
    <<: *aws-cli-image
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
               --template-file .circleci/files/backend.yml \
               --tags project=udapeople \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
               --template-file .circleci/files/frontend.yml \
               --tags project=udapeople \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text | tee .circleci/ansible/inventory.txt .circleci/ansible/ec2-ip.txt
      - run:
          name: Install dependencies for persist_to_workspace
          command: yum -y install tar gzip
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
            - .circleci/ansible/ec2-ip.txt
      - destroy-environment:
          id: "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
      - destroy-environment:
          id: "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"

  configure-infrastructure:
    <<: *ansible-image
    steps:
      - checkout
      - run:
          name: Install dependencies for attach_workspace
          command: apk add --update tar gzip
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: ["23:c9:71:07:b1:8e:81:ee:ae:5e:48:35:a6:9f:65:f9"]
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
      - run:
          name: Install awscli
          when: on_fail
          command: |
            apk add --update curl && \
            apk add --update unzip && \
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
            unzip awscliv2.zip && \
            ./aws/install
      - destroy-environment:
          id: "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
      - destroy-environment:
          id: "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"

  run-migrations:
    <<: *node-image
    steps:
      - checkout
      - run:
          command: sudo apt-get install -y tar gzip curl
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          working_directory: backend
          command: |
            npm run migrations > migrations-result.txt
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: << pipeline.parameters.memstash_token >>" --request PUT --data `cat ./backend/migrations-result.txt` https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
      - run:
          when: on_fail
          command: sudo apt-get update && sudo apt-get install -y awscli curl grep
      - revert-migrations:
          id: "migrations-${CIRCLE_WORKFLOW_ID}"
      - destroy-environment:
          id: "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
      - destroy-environment:
          id: "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"

  deploy-frontend:
    <<: *node-image
    steps:
      - checkout
      - run:
          command: sudo apt-get install -y tar gzip
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: sudo apt-get update && sudo apt-get install -y grep
      - run:
          name: Deploy frontend objects
          command: |
            export API_URL="http://`cat .circleci/ansible/ec2-ip.txt`:3030" && \
            cd ./frontend && \
            npm run build
      - aws-s3/copy:
          from: ./frontend/dist
          to: "s3://udapeople-${CIRCLE_WORKFLOW_ID}"
      - run:
          when: on_fail
          command: sudo apt-get update && sudo apt-get install -y awscli curl
      - revert-migrations:
          id: "migrations-${CIRCLE_WORKFLOW_ID}"
      - destroy-environment:
          id: "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
      - destroy-environment:
          id: "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"
                    
  deploy-backend:
    <<: *ansible-image
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["23:c9:71:07:b1:8e:81:ee:ae:5e:48:35:a6:9f:65:f9"]
      - run:
          name: Install dependencies for attach_workspace
          command: apk add --update tar gzip
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      - run:
          name: Install awscli
          when: on_fail
          command: |
            apk add --update curl && \
            apk add --update unzip && \
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
            unzip awscliv2.zip && \
            ./aws/install
      - revert-migrations:
          id: "migrations-${CIRCLE_WORKFLOW_ID}"
      - destroy-environment:
          id: "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
      - destroy-environment:
          id: "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"

  smoke-test:
    <<: *lightweight-image
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    <<: *aws-cli-image
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
    <<: *lightweight-image
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi

workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      #- deploy-infrastructure
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #requires: [build-frontend, build-backend]
      #    filters:
      #      branches:
      #        only: [final-project]
      #- configure-infrastructure:
      #    requires: [deploy-infrastructure]
      #- run-migrations:
      #    requires: [configure-infrastructure]
      - deploy-frontend
          #requires: [run-migrations]
      #- deploy-backend:
      #    requires: [run-migrations]
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]